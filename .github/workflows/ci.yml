name: CI/CD Pipeline (qmake)

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  QT_VERSION: 6.5.0
  BUILD_TYPE: release

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        cache: true
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format cppcheck
        
    - name: Check code formatting
      run: |
        find . -name "*.cpp" -o -name "*.h" | grep -v ui_ | grep -v moc_ | xargs clang-format --dry-run --Werror
        
    - name: Static analysis with cppcheck
      run: |
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem --suppress=unusedFunction *.cpp *.h
        
  # Job 2: Build and Test - Linux
  build-linux:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        build_type: [debug, release]
        qt_version: ['6.5.0', '6.6.0']
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt_version }}
        cache: true
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Configure with qmake
      run: |
        qmake CONFIG+=${{ matrix.build_type }} satiscalculator.pro
        
    - name: Build
      run: |
        make -j$(nproc)
        
    - name: Test executable
      run: |
        if [ "${{ matrix.build_type }}" = "debug" ]; then
          EXECUTABLE=./satiscalculator
        else
          EXECUTABLE=./satiscalculator
        fi
        
        if [ -f "$EXECUTABLE" ]; then
          echo "✅ Executable created successfully"
          file "$EXECUTABLE"
          ls -la "$EXECUTABLE"
        else
          echo "❌ Executable not found"
          find . -name "satiscalculator*" -type f
          exit 1
        fi
        
    - name: Upload artifacts
      if: matrix.build_type == 'release' && matrix.qt_version == '6.5.0'
      uses: actions/upload-artifact@v4
      with:
        name: satisfactory-calculator-linux
        path: satiscalculator
        
  # Job 3: Build and Test - Windows
  build-windows:
    name: Build & Test (Windows)
    runs-on: windows-latest
    needs: code-quality
    
    strategy:
      matrix:
        build_type: [debug, release]
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        arch: win64_msvc2019_64
        cache: true
        
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Configure with qmake
      run: |
        qmake CONFIG+=${{ matrix.build_type }} satiscalculator.pro
        
    - name: Build
      run: |
        nmake
        
    - name: Test executable
      run: |
        $EXECUTABLE = "satiscalculator.exe"
        if (${{ matrix.build_type }} -eq "debug") {
          if (Test-Path "debug\satiscalculator.exe") {
            $EXECUTABLE = "debug\satiscalculator.exe"
          }
        } elseif (Test-Path "release\satiscalculator.exe") {
          $EXECUTABLE = "release\satiscalculator.exe"
        }
        
        if (Test-Path $EXECUTABLE) {
          Write-Host "✅ Executable created successfully"
          Get-ChildItem $EXECUTABLE
        } else {
          Write-Host "❌ Executable not found"
          Get-ChildItem -Recurse -Filter "satiscalculator*"
          exit 1
        }
        
    - name: Upload artifacts
      if: matrix.build_type == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: satisfactory-calculator-windows
        path: |
          satiscalculator.exe
          release/satiscalculator.exe
        if-no-files-found: ignore
        
  # Job 4: Build and Test - macOS
  build-macos:
    name: Build & Test (macOS)
    runs-on: macos-latest
    needs: code-quality
    
    strategy:
      matrix:
        build_type: [debug, release]
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        cache: true
        
    - name: Configure with qmake
      run: |
        qmake CONFIG+=${{ matrix.build_type }} satiscalculator.pro
        
    - name: Build
      run: |
        make -j$(sysctl -n hw.ncpu)
        
    - name: Test executable
      run: |
        EXECUTABLE=./satiscalculator
        
        if [ -f "$EXECUTABLE" ]; then
          echo "✅ Executable created successfully"
          file "$EXECUTABLE"
          ls -la "$EXECUTABLE"
        else
          echo "❌ Executable not found"
          find . -name "satiscalculator*" -type f
          exit 1
        fi
        
    - name: Create App Bundle
      if: matrix.build_type == 'release'
      run: |
        mkdir -p SatisfactoryCalculator.app/Contents/MacOS
        cp satiscalculator SatisfactoryCalculator.app/Contents/MacOS/
        macdeployqt SatisfactoryCalculator.app
        
    - name: Upload artifacts
      if: matrix.build_type == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: satisfactory-calculator-macos
        path: SatisfactoryCalculator.app/
        
  # Job 5: Create Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release packages
      run: |
        # Linux
        if [ -d "satisfactory-calculator-linux" ]; then
          tar -czf satisfactory-calculator-linux.tar.gz -C satisfactory-calculator-linux .
        fi
        
        # Windows
        if [ -d "satisfactory-calculator-windows" ]; then
          cd satisfactory-calculator-windows
          zip -r ../satisfactory-calculator-windows.zip *
          cd ..
        fi
        
        # macOS
        if [ -d "satisfactory-calculator-macos" ]; then
          tar -czf satisfactory-calculator-macos.tar.gz -C satisfactory-calculator-macos .
        fi
        
    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from commits
        if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD > CHANGELOG.md
        else
          echo "- Initial release" > CHANGELOG.md
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.changelog.outputs.version }}
        body_path: CHANGELOG.md
        files: |
          satisfactory-calculator-*.tar.gz
          satisfactory-calculator-*.zip
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 